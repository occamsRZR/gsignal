.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Config 3"
.TH Template::Config 3 "2011-07-25" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Template::Config \- Factory module for instantiating other TT2 modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Config;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements various methods for loading and instantiating
other modules that comprise the Template Toolkit.  It provides a consistent
way to create toolkit components and allows custom modules to be used in 
place of the regular ones.
.PP
Package variables such as \f(CW$STASH\fR, \f(CW$SERVICE\fR, \f(CW$CONTEXT\fR, etc., contain
the default module/package name for each component (Template::Stash,
Template::Service and Template::Context, respectively) and are used by
the various factory methods (\fIstash()\fR, \fIservice()\fR and \fIcontext()\fR) to
load the appropriate module. Changing these package variables will cause
subsequent calls to the relevant factory method to load and instantiate an
object from the new class.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.Sh "load($module)"
.IX Subsection "load($module)"
Load a module using Perl's \fIrequire()\fR. Any occurences of '\f(CW\*(C`::\*(C'\fR' in the module
name are be converted to '\f(CW\*(C`/\*(C'\fR', and '\f(CW\*(C`.pm\*(C'\fR' is appended. Returns 1 on success or
undef on error.  Use \f(CW\*(C`$class\->error()\*(C'\fR to examine the error string.
.Sh "\fIpreload()\fP"
.IX Subsection "preload()"
This method preloads all the other \f(CW\*(C`Template::*\*(C'\fR modules that are likely to
be used. It is called automatically by the Template module when running
under mod_perl (\f(CW$ENV{MOD_PERL}\fR is set).
.Sh "parser(\e%config)"
.IX Subsection "parser(%config)"
Instantiate a new parser object of the class whose name is denoted by
the package variable \f(CW$PARSER\fR (default: Template::Parser).  Returns
a reference to a newly instantiated parser object or undef on error.
.Sh "provider(\e%config)"
.IX Subsection "provider(%config)"
Instantiate a new template provider object (default: Template::Provider).
Returns an object reference or undef on error, as above.
.Sh "plugins(\e%config)"
.IX Subsection "plugins(%config)"
Instantiate a new plugins provider object (default: Template::Plugins).
Returns an object reference or undef on error, as above.
.Sh "filters(\e%config)"
.IX Subsection "filters(%config)"
Instantiate a new filter provider object (default: Template::Filters).
Returns an object reference or undef on error, as above.
.Sh "stash(\e%vars)"
.IX Subsection "stash(%vars)"
Instantiate a new stash object (Template::Stash or Template::Stash::XS
depending on the default set at installation time) using the contents of the
optional hash array passed by parameter as initial variable definitions.
Returns an object reference or undef on error, as above.
.Sh "context(\e%config)"
.IX Subsection "context(%config)"
Instantiate a new template context object (default: Template::Context).
Returns an object reference or undef on error, as above.
.Sh "service(\e%config)"
.IX Subsection "service(%config)"
Instantiate a new template service object (default: Template::Service).
Returns an object reference or undef on error, as above.
.Sh "iterator(\e%config)"
.IX Subsection "iterator(%config)"
Instantiate a new template iterator object (default: Template::Iterator).
Returns an object reference or undef on error, as above.
.Sh "constants(\e%config)"
.IX Subsection "constants(%config)"
Instantiate a new namespace handler for compile time constant folding
(default: Template::Namespace::Constants). Returns an object reference or
undef on error, as above.
.Sh "instdir($dir)"
.IX Subsection "instdir($dir)"
Returns the root directory of the Template Toolkit installation under
which optional components are installed.  Any relative directory specified
as an argument will be appended to the returned directory.
.PP
.Vb 3
\&    # e.g. returns '/usr/local/tt2'
\&    my $ttroot = Template::Config->instdir()
\&        || die "$Template::Config::ERROR\en";
.Ve
.PP
.Vb 3
\&    # e.g. returns '/usr/local/tt2/templates'
\&    my $template = Template::Config->instdir('templates')
\&        || die "$Template::Config::ERROR\en";
.Ve
.PP
Returns \f(CW\*(C`undef\*(C'\fR and sets \f(CW$Template::Config::ERROR\fR appropriately if the 
optional components of the Template Toolkit have not been installed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template
