.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Filters 3"
.TH Template::Filters 3 "2011-07-25" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Template::Filters \- Post\-processing filters for template blocks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Filters;
.Ve
.PP
.Vb 1
\&    $filters = Template::Filters->new(\e%config);
.Ve
.PP
.Vb 1
\&    ($filter, $error) = $filters->fetch($name, \e@args, $context);
.Ve
.PP
.Vb 6
\&    if ($filter) {
\&        print &$filter("some text");
\&    }
\&    else {
\&        print "Could not fetch $name filter: $error\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Template::Filters\*(C'\fR module implements a provider for creating subroutines
that implement the standard filters. Additional custom filters may be provided
via the \s-1FILTERS\s0 configuration option.
.SH "METHODS"
.IX Header "METHODS"
.Sh "new(\e%params)"
.IX Subsection "new(%params)"
Constructor method which instantiates and returns a reference to a
\&\f(CW\*(C`Template::Filters\*(C'\fR object.  A reference to a hash array of configuration
items may be passed as a parameter.  These are described below.  
.PP
.Vb 3
\&    my $filters = Template::Filters->new({
\&        FILTERS => { ... },
\&    });
.Ve
.PP
.Vb 3
\&    my $template = Template->new({
\&        LOAD_FILTERS => [ $filters ],
\&    });
.Ve
.PP
A default \f(CW\*(C`Template::Filters\*(C'\fR module is created by the Template module
if the \s-1LOAD_FILTERS\s0 option isn't specified.  All configuration parameters
are forwarded to the constructor.
.PP
.Vb 3
\&    $template = Template->new({
\&        FILTERS => { ... },
\&    });
.Ve
.ie n .Sh "fetch($name, \e@args, $context)"
.el .Sh "fetch($name, \e@args, \f(CW$context\fP)"
.IX Subsection "fetch($name, @args, $context)"
Called to request that a filter of a given name be provided.  The name
of the filter should be specified as the first parameter.  This should
be one of the standard filters or one specified in the \s-1FILTERS\s0
configuration hash.  The second argument should be a reference to an
array containing configuration parameters for the filter.  This may be
specified as 0, or undef where no parameters are provided.  The third
argument should be a reference to the current Template::Context
object.
.PP
The method returns a reference to a filter sub-routine on success.  It
may also return \f(CW\*(C`(undef, STATUS_DECLINE)\*(C'\fR to decline the request, to allow
delegation onto other filter providers in the \s-1LOAD_FILTERS\s0 chain of 
responsibility.  On error, \f(CW\*(C`($error, STATUS_ERROR)\*(C'\fR is returned where \f(CW$error\fR
is an error message or Template::Exception object indicating the error
that occurred. 
.PP
When the \f(CW\*(C`TOLERANT\*(C'\fR option is set, errors are automatically downgraded to
a \f(CW\*(C`STATUS_DECLINE\*(C'\fR response.
.Sh "\fIuse_html_entities()\fP"
.IX Subsection "use_html_entities()"
This class method can be called to configure the \f(CW\*(C`html_entity\*(C'\fR filter to use
the HTML::Entities module. An error will be raised if it is not installed
on your system.
.PP
.Vb 2
\&    use Template::Filters;
\&    Template::Filters->use_html_entities();
.Ve
.Sh "\fIuse_apache_util()\fP"
.IX Subsection "use_apache_util()"
This class method can be called to configure the \f(CW\*(C`html_entity\*(C'\fR filter to use
the Apache::Util module. An error will be raised if it is not installed on
your system.
.PP
.Vb 2
\&    use Template::Filters;
\&    Template::Filters->use_apache_util();
.Ve
.SH "CONFIGURATION OPTIONS"
.IX Header "CONFIGURATION OPTIONS"
The following list summarises the configuration options that can be provided
to the \f(CW\*(C`Template::Filters\*(C'\fR \fInew()\fR constructor. Please see
Template::Manual::Config for further information about each option.
.Sh "\s-1FILTERS\s0"
.IX Subsection "FILTERS"
The \s-1FILTERS\s0 option can be used to specify
custom filters which can then be used with the
\&\s-1FILTER\s0 directive like any other. These
are added to the standard filters which are available by default.
.PP
.Vb 6
\&    $filters = Template::Filters->new({
\&        FILTERS => {
\&            'sfilt1' =>   \e&static_filter,
\&            'dfilt1' => [ \e&dyanamic_filter_factory, 1 ],
\&        },
\&    });
.Ve
.Sh "\s-1TOLERANT\s0"
.IX Subsection "TOLERANT"
The \s-1TOLERANT\s0 flag can be set to indicate
that the \f(CW\*(C`Template::Filters\*(C'\fR module should ignore any errors and instead
return \f(CW\*(C`STATUS_DECLINED\*(C'\fR.
.Sh "\s-1DEBUG\s0"
.IX Subsection "DEBUG"
The \s-1DEBUG\s0 option can be used to enable
debugging messages for the Template::Filters module by setting it to include
the \f(CW\*(C`DEBUG_FILTERS\*(C'\fR value.
.PP
.Vb 1
\&    use Template::Constants qw( :debug );
.Ve
.PP
.Vb 3
\&    my $template = Template->new({
\&        DEBUG => DEBUG_FILTERS | DEBUG_PLUGINS,
\&    });
.Ve
.SH "STANDARD FILTERS"
.IX Header "STANDARD FILTERS"
Please see Template::Manual::Filters for a list of the filters provided
with the Template Toolkit, complete with examples of use.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Manual::Filters, Template, Template::Context
