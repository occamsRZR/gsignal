.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Plugin::URL 3"
.TH Template::Plugin::URL 3 "2011-07-25" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Template::Plugin::URL \- Plugin to construct complex URLs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    [% USE url('/cgi-bin/foo.pl') %]
.Ve
.PP
.Vb 2
\&    [% url(debug = 1, id = 123) %]
\&       # ==> /cgi/bin/foo.pl?debug=1&amp;id=123
.Ve
.PP
.Vb 1
\&    [% USE mycgi = url('/cgi-bin/bar.pl', mode='browse', debug=1) %]
.Ve
.PP
.Vb 2
\&    [% mycgi %]
\&       # ==> /cgi/bin/bar.pl?mode=browse&amp;debug=1
.Ve
.PP
.Vb 2
\&    [% mycgi(mode='submit') %]
\&       # ==> /cgi/bin/bar.pl?mode=submit&amp;debug=1
.Ve
.PP
.Vb 2
\&    [% mycgi(debug='d2 p0', id='D4-2k[4]') %]
\&       # ==> /cgi-bin/bar.pl?mode=browse&amp;debug=d2%20p0&amp;id=D4-2k%5B4%5D
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`URL\*(C'\fR plugin can be used to construct complex URLs from a base stem 
and a hash array of additional query parameters.
.PP
The constructor should be passed a base \s-1URL\s0 and optionally, a hash array
reference of default parameters and values.  Used from with a template,
it would look something like the following:
.PP
.Vb 3
\&    [% USE url('http://www.somewhere.com/cgi-bin/foo.pl') %]
\&    [% USE url('/cgi-bin/bar.pl', mode='browse') %]
\&    [% USE url('/cgi-bin/baz.pl', mode='browse', debug=1) %]
.Ve
.PP
When the plugin is then called without any arguments, the default base
and parameters are returned as a formatted query string.  
.PP
.Vb 1
\&    [% url %]
.Ve
.PP
For the above three examples, these will produce the following outputs:
.PP
.Vb 3
\&    http://www.somewhere.com/cgi-bin/foo.pl
\&    /cgi-bin/bar.pl?mode=browse
\&    /cgi-bin/baz.pl?mode=browse&amp;debug=1
.Ve
.PP
Note that additional parameters are separated by '\f(CW\*(C`&amp;\*(C'\fR' rather than
simply '\f(CW\*(C`&\*(C'\fR'.  This is the correct behaviour for \s-1HTML\s0 pages but is,
unfortunately, incorrect when creating URLs that do not need to be
encoded safely for \s-1HTML\s0.  This is likely to be corrected in a future
version of the plugin (most probably with \s-1TT3\s0).  In the mean time, you
can set \f(CW$Template::Plugin::URL::JOINT\fR to \f(CW\*(C`&\*(C'\fR to get the correct
behaviour.
.PP
Additional parameters may be also be specified to the \s-1URL:\s0
.PP
.Vb 1
\&    [% url(mode='submit', id='wiz') %]
.Ve
.PP
Which, for the same three examples, produces:
.PP
.Vb 3
\&    http://www.somewhere.com/cgi-bin/foo.pl?mode=submit&amp;id=wiz
\&    /cgi-bin/bar.pl?mode=browse&amp;id=wiz
\&    /cgi-bin/baz.pl?mode=browse&amp;debug=1&amp;id=wiz
.Ve
.PP
A new base \s-1URL\s0 may also be specified as the first option:
.PP
.Vb 1
\&    [% url('/cgi-bin/waz.pl', test=1) %]
.Ve
.PP
producing
.PP
.Vb 3
\&    /cgi-bin/waz.pl?test=1
\&    /cgi-bin/waz.pl?mode=browse&amp;test=1
\&    /cgi-bin/waz.pl?mode=browse&amp;debug=1&amp;test=1
.Ve
.PP
The ordering of the parameters is non-deterministic due to fact that 
Perl's hashes themselves are unordered.  This isn't a problem as the 
ordering of \s-1CGI\s0 parameters is insignificant (to the best of my knowledge).
All values will be properly escaped thanks to some code borrowed from
Lincoln Stein's \f(CW\*(C`CGI\*(C'\fR module.  e.g.
.PP
.Vb 2
\&    [% USE url('/cgi-bin/woz.pl') %]
\&    [% url(name="Elrich von Benjy d'Weiro") %]
.Ve
.PP
Here the spaces and "\f(CW\*(C`\(aq\*(C'\fR" character are escaped in the output:
.PP
.Vb 1
\&    /cgi-bin/woz.pl?name=Elrich%20von%20Benjy%20d%27Weiro
.Ve
.PP
An alternate name may be provided for the plugin at construction time
as per regular Template Toolkit syntax.
.PP
.Vb 2
\&    [% USE mycgi = url('cgi-bin/min.pl') %]
\&    [% mycgi(debug=1) %]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugin
