.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Plugin::Date 3"
.TH Template::Plugin::Date 3 "2011-07-25" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Template::Plugin::Date \- Plugin to generate formatted date strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    [% USE date %]
.Ve
.PP
.Vb 2
\&    # use current time and default format
\&    [% date.format %]
.Ve
.PP
.Vb 5
\&    # specify time as seconds since epoch
\&    # or as a 'h:m:s d-m-y' or 'y-m-d h:m:s' string
\&    [% date.format(960973980) %]
\&    [% date.format('4:20:36 21/12/2000') %]
\&    [% date.format('2000/12/21 4:20:36') %]
.Ve
.PP
.Vb 2
\&    # specify format
\&    [% date.format(mytime, '%H:%M:%S') %]
.Ve
.PP
.Vb 2
\&    # specify locale
\&    [% date.format(date.now, '%a %d %b %y', 'en_GB') %]
.Ve
.PP
.Vb 6
\&    # named parameters 
\&    [% date.format(mytime, format = '%H:%M:%S') %]
\&    [% date.format(locale = 'en_GB') %]
\&    [% date.format(time   = date.now, 
\&                   format = '%H:%M:%S', 
\&                   locale = 'en_GB) %]
.Ve
.PP
.Vb 2
\&    # specify default format to plugin
\&    [% USE date(format = '%H:%M:%S', locale = 'de_DE') %]
.Ve
.PP
.Vb 2
\&    [% date.format %]
\&    ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Date\*(C'\fR plugin provides an easy way to generate formatted time and date
strings by delegating to the \f(CW\*(C`POSIX\*(C'\fR \f(CW\*(C`strftime()\*(C'\fR routine.
.PP
The plugin can be loaded via the familiar \s-1USE\s0 directive.
.PP
.Vb 1
\&    [% USE date %]
.Ve
.PP
This creates a plugin object with the default name of '\f(CW\*(C`date\*(C'\fR'.  An alternate
name can be specified as such:
.PP
.Vb 1
\&    [% USE myname = date %]
.Ve
.PP
The plugin provides the \f(CW\*(C`format()\*(C'\fR method which accepts a time value, a
format string and a locale name.  All of these parameters are optional
with the current system time, default format ('\f(CW\*(C`%H:%M:%S %d\-%b\-%Y\*(C'\fR') and
current locale being used respectively, if undefined.  Default values
for the time, format and/or locale may be specified as named parameters 
in the \f(CW\*(C`USE\*(C'\fR directive.
.PP
.Vb 1
\&    [% USE date(format = '%a %d-%b-%Y', locale = 'fr_FR') %]
.Ve
.PP
When called without any parameters, the \f(CW\*(C`format()\*(C'\fR method returns a string
representing the current system time, formatted by \f(CW\*(C`strftime()\*(C'\fR according 
to the default format and for the default locale (which may not be the
current one, if locale is set in the \f(CW\*(C`USE\*(C'\fR directive).
.PP
.Vb 1
\&    [% date.format %]
.Ve
.PP
The plugin allows a time/date to be specified as seconds since the epoch,
as is returned by \f(CW\*(C`time()\*(C'\fR.
.PP
.Vb 1
\&    File last modified: [% date.format(filemod_time) %]
.Ve
.PP
The time/date can also be specified as a string of the form \f(CW\*(C`h:m:s d/m/y\*(C'\fR
or \f(CW\*(C`y/m/d h:m:s\*(C'\fR.  Any of the characters : / \- or space may be used to
delimit fields.
.PP
.Vb 2
\&    [% USE day = date(format => '%A', locale => 'en_GB') %]
\&    [% day.format('4:20:00 9-13-2000') %]
.Ve
.PP
Output:
.PP
.Vb 1
\&    Tuesday
.Ve
.PP
A format string can also be passed to the \f(CW\*(C`format()\*(C'\fR method, and a locale
specification may follow that.
.PP
.Vb 2
\&    [% date.format(filemod, '%d-%b-%Y') %]
\&    [% date.format(filemod, '%d-%b-%Y', 'en_GB') %]
.Ve
.PP
A fourth parameter allows you to force output in \s-1GMT\s0, in the case of 
seconds-since-the-epoch input:
.PP
.Vb 1
\&    [% date.format(filemod, '%d-%b-%Y', 'en_GB', 1) %]
.Ve
.PP
Note that in this case, if the local time is not \s-1GMT\s0, then also specifying
\&'\f(CW%Z\fR' (time zone) in the format parameter will lead to an extremely 
misleading result.
.PP
Any or all of these parameters may be named.  Positional parameters
should always be in the order \f(CW\*(C`($time, $format, $locale)\*(C'\fR.
.PP
.Vb 6
\&    [% date.format(format => '%H:%M:%S') %]
\&    [% date.format(time => filemod, format => '%H:%M:%S') %]
\&    [% date.format(mytime, format => '%H:%M:%S') %]
\&    [% date.format(mytime, format => '%H:%M:%S', locale => 'fr_FR') %]
\&    [% date.format(mytime, format => '%H:%M:%S', gmt => 1) %]
\&    ...etc...
.Ve
.PP
The \f(CW\*(C`now()\*(C'\fR method returns the current system time in seconds since the 
epoch.  
.PP
.Vb 1
\&    [% date.format(date.now, '%A') %]
.Ve
.PP
The \f(CW\*(C`calc()\*(C'\fR method can be used to create an interface to the \f(CW\*(C`Date::Calc\*(C'\fR
module (if installed on your system).
.PP
.Vb 2
\&    [% calc = date.calc %]
\&    [% calc.Monday_of_Week(22, 2001).join('/') %]
.Ve
.PP
The \f(CW\*(C`manip()\*(C'\fR method can be used to create an interface to the \f(CW\*(C`Date::Manip\*(C'\fR
module (if installed on your system).
.PP
.Vb 2
\&    [% manip = date.manip %]
\&    [% manip.UnixDate("Noon Yesterday","%Y %b %d %H:%M") %]
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Thierry-Michel Barral wrote the original plugin.
.PP
Andy Wardley provided some minor
fixups/enhancements, a test script and documentation.
.PP
Mark D. Mills cloned \f(CW\*(C`Date::Manip\*(C'\fR from the \f(CW\*(C`Date::Calc\*(C'\fR sub\-plugin.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2007 Thierry-Michel Barral, Andy Wardley.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugin, \s-1POSIX\s0
