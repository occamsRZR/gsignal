.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Parser 3"
.TH Template::Parser 3 "2011-07-25" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Template::Parser \- LALR(1) parser for compiling template documents
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Parser;
.Ve
.PP
.Vb 3
\&    $parser   = Template::Parser->new(\e%config);
\&    $template = $parser->parse($text)
\&        || die $parser->error(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Template::Parser\*(C'\fR module implements a \s-1\fILALR\s0\fR\|(1) parser and associated
methods for parsing template documents into Perl code.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.Sh "new(\e%params)"
.IX Subsection "new(%params)"
The \f(CW\*(C`new()\*(C'\fR constructor creates and returns a reference to a new 
\&\f(CW\*(C`Template::Parser\*(C'\fR object.  
.PP
A reference to a hash may be supplied as a parameter to provide configuration values.  
See \*(L"\s-1CONFIGURATION\s0 \s-1OPTIONS\s0\*(R" below for a summary of these options and 
Template::Manual::Config for full details.
.PP
.Vb 4
\&    my $parser = Template::Parser->new({
\&        START_TAG => quotemeta('<+'),
\&        END_TAG   => quotemeta('+>'),
\&    });
.Ve
.Sh "parse($text)"
.IX Subsection "parse($text)"
The \f(CW\*(C`parse()\*(C'\fR method parses the text passed in the first parameter and
returns a reference to a hash array of data defining the compiled
representation of the template text, suitable for passing to the
Template::Document \fInew()\fR constructor method. On
error, undef is returned.
.PP
.Vb 2
\&    $data = $parser->parse($text)
\&        || die $parser->error();
.Ve
.PP
The \f(CW$data\fR hash reference returned contains a \f(CW\*(C`BLOCK\*(C'\fR item containing the
compiled Perl code for the template, a \f(CW\*(C`DEFBLOCKS\*(C'\fR item containing a
reference to a hash array of sub-template \f(CW\*(C`BLOCK\*(C'\fRs defined within in the
template, and a \f(CW\*(C`METADATA\*(C'\fR item containing a reference to a hash array
of metadata values defined in \f(CW\*(C`META\*(C'\fR tags.
.SH "CONFIGURATION OPTIONS"
.IX Header "CONFIGURATION OPTIONS"
The \f(CW\*(C`Template::Parser\*(C'\fR module accepts the following configuration 
options.  Please see Template::Manual::Config for futher details
on each option.
.Sh "\s-1START_TAG\s0, \s-1END_TAG\s0"
.IX Subsection "START_TAG, END_TAG"
The \s-1START_TAG\s0 and
\&\s-1END_TAG\s0 options are used to
specify character sequences or regular expressions that mark the start and end
of a template directive.
.PP
.Vb 4
\&    my $parser = Template::Parser->new({ 
\&        START_TAG => quotemeta('<+'),
\&        END_TAG   => quotemeta('+>'),
\&    });
.Ve
.Sh "\s-1TAG_STYLE\s0"
.IX Subsection "TAG_STYLE"
The \s-1TAG_STYLE\s0 option can be used to set
both \s-1START_TAG\s0 and \s-1END_TAG\s0 according to pre-defined tag styles.
.PP
.Vb 3
\&    my $parser = Template::Parser->new({ 
\&        TAG_STYLE => 'star',     # [* ... *]
\&    });
.Ve
.Sh "\s-1PRE_CHOMP\s0, \s-1POST_CHOMP\s0"
.IX Subsection "PRE_CHOMP, POST_CHOMP"
The \s-1PRE_CHOMP\s0 and
\&\s-1POST_CHOMP\s0 can be set to remove
any whitespace before or after a directive tag, respectively.
.PP
.Vb 4
\&    my $parser = Template::Parser-E<gt>new({
\&        PRE_CHOMP  => 1,
\&        POST_CHOMP => 1,
\&    });
.Ve
.Sh "\s-1INTERPOLATE\s0"
.IX Subsection "INTERPOLATE"
The \s-1INTERPOLATE\s0 flag can be set
to allow variables to be embedded in plain text blocks.
.PP
.Vb 3
\&    my $parser = Template::Parser->new({ 
\&        INTERPOLATE => 1,
\&    });
.Ve
.PP
Variables should be prefixed by a \f(CW\*(C`$\*(C'\fR to identify them, using curly braces
to explicitly scope the variable name where necessary.
.PP
.Vb 1
\&    Hello ${name},
.Ve
.PP
.Vb 1
\&    The day today is ${day.today}.
.Ve
.Sh "\s-1ANYCASE\s0"
.IX Subsection "ANYCASE"
The \s-1ANYCASE\s0 option can be set
to allow directive keywords to be specified in any case.
.PP
.Vb 4
\&    # with ANYCASE set to 1
\&    [% INCLUDE foobar %]    # OK
\&    [% include foobar %]    # OK
\&    [% include = 10   %]    # ERROR, 'include' is a reserved word
.Ve
.Sh "\s-1GRAMMAR\s0"
.IX Subsection "GRAMMAR"
The \s-1GRAMMAR\s0 configuration item can be used
to specify an alternate grammar for the parser. This allows a modified or
entirely new template language to be constructed and used by the Template
Toolkit.
.PP
.Vb 1
\&    use MyOrg::Template::Grammar;
.Ve
.PP
.Vb 3
\&    my $parser = Template::Parser->new({ 
\&        GRAMMAR = MyOrg::Template::Grammar->new();
\&    });
.Ve
.PP
By default, an instance of the default Template::Grammar will be
created and used automatically if a \f(CW\*(C`GRAMMAR\*(C'\fR item isn't specified.
.Sh "\s-1DEBUG\s0"
.IX Subsection "DEBUG"
The \s-1DEBUG\s0 option can be used to enable
various debugging features of the \f(CW\*(C`Template::Parser\*(C'\fR module.
.PP
.Vb 1
\&    use Template::Constants qw( :debug );
.Ve
.PP
.Vb 3
\&    my $template = Template->new({
\&        DEBUG => DEBUG_PARSER | DEBUG_DIRS,
\&    });
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
The main parsing loop of the \f(CW\*(C`Template::Parser\*(C'\fR module was derived from a
standalone parser generated by version 0.16 of the \f(CW\*(C`Parse::Yapp\*(C'\fR module. The
following copyright notice appears in the \f(CW\*(C`Parse::Yapp\*(C'\fR documentation.
.PP
.Vb 3
\&    The Parse::Yapp module and its related modules and shell
\&    scripts are copyright (c) 1998 Francois Desarmenien,
\&    France. All rights reserved.
.Ve
.PP
.Vb 3
\&    You may use and distribute them under the terms of either
\&    the GNU General Public License or the Artistic License, as
\&    specified in the Perl README file.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template, Template::Grammar, Template::Directive
